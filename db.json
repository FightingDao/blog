{"meta":{"version":1,"warehouse":"1.0.3"},"models":{"Asset":[{"_id":"themes/umaru/source/js/zoom.js","path":"js/zoom.js","modified":1},{"_id":"themes/umaru/source/js/prism.js","path":"js/prism.js","modified":1},{"_id":"themes/umaru/source/js/pjax.js","path":"js/pjax.js","modified":1},{"_id":"themes/umaru/source/js/page-walker.js","path":"js/page-walker.js","modified":1},{"_id":"themes/umaru/source/js/app.js","path":"js/app.js","modified":1},{"_id":"themes/umaru/source/images/rss.png","path":"images/rss.png","modified":1},{"_id":"themes/umaru/source/css/zoom.styl","path":"css/zoom.styl","modified":1},{"_id":"themes/umaru/source/css/reset.styl","path":"css/reset.styl","modified":1},{"_id":"themes/umaru/source/css/post.styl","path":"css/post.styl","modified":1},{"_id":"themes/umaru/source/css/normalize.styl","path":"css/normalize.styl","modified":1},{"_id":"themes/umaru/source/css/mixins.styl","path":"css/mixins.styl","modified":1},{"_id":"themes/umaru/source/css/markdown.styl","path":"css/markdown.styl","modified":1},{"_id":"themes/umaru/source/css/main.styl","path":"css/main.styl","modified":1},{"_id":"themes/umaru/source/css/highlight.styl","path":"css/highlight.styl","modified":1}],"Cache":[{"_id":"source/_posts/2015-10-anime-recommendations.md","shasum":"7379fd92897f5522018cb9ee62384c96994540b4","modified":1446043009175},{"_id":"source/_posts/2015-7-animes-review.md","shasum":"0889573fac2daca77eaa40ea3823263ea8d31e98","modified":1446043009175},{"_id":"source/_posts/Hello-World.md","shasum":"101d84303893c11cfad57c65b86987c846979c68","modified":1446043009176},{"_id":"source/_posts/a-light-weight-localstorage-orm.md","shasum":"90e267da9bdb629c1695ea1f08a1bbd83d7c110d","modified":1446043009177},{"_id":"source/_posts/all-things-last-long.md","shasum":"e8fac6b10df6ff7bba812f0c77629662874905ac","modified":1446043009177},{"_id":"source/_posts/good-and-bad-anime.md","shasum":"f7d4ade6a8a4427236e4fe9b01c0d642982f7a4d","modified":1446043009179},{"_id":"source/_posts/git-memo.md","shasum":"c3ae195f36d423dc67ee99d9e542a38bcd76fad5","modified":1446043009178},{"_id":"source/_posts/how-to-undo-with-git.md","shasum":"7c7017fb8bc72533fd12804fb03ea73d3393789e","modified":1446043009180},{"_id":"source/_posts/log-in-with-your-teminal.md","shasum":"09f5f825a06dc0c7d767f96b50a2c00b98e39154","modified":1446043009180},{"_id":"source/_posts/why-so-addicted-into-anime.md","shasum":"561ef793e8e19e7b952a77bd5748ac73adeaa553","modified":1446043009181},{"_id":"source/resume/index.md","shasum":"ccb766aa4d496e385f4adf2c9ba0d9cc89b3cb53","modified":1446043009182},{"_id":"themes/umaru/_config.yml","shasum":"e1fa116f99b8ab7c23ab75b59932a1a5b9aeb1e3","modified":1446043009243},{"_id":"themes/umaru/layout/base.jade","shasum":"84950fe595ece78716cf7546ea8ccb5470e742ec","modified":1446046524195},{"_id":"themes/umaru/layout/index.jade","shasum":"269eed7c98f7a5010d8b1c1679093080f6027837","modified":1446043009245},{"_id":"themes/umaru/layout/post.jade","shasum":"b927dce384f5411e9b76d259ef9622f94e72833a","modified":1446043009246},{"_id":"themes/umaru/package.json","shasum":"ecf2d6f7ecc1599538f8dc02c35dfcb79f22e7f5","modified":1446043009246},{"_id":"themes/umaru/source/css/highlight.styl","shasum":"43cbbfb1fedfa37b094381df79cb23b807e376e6","modified":1446043009249},{"_id":"themes/umaru/source/css/main.styl","shasum":"261fdf0dc4811894efc47166f3bf224cfe965fd3","modified":1446045855029},{"_id":"themes/umaru/source/css/markdown.styl","shasum":"e79e5febee9e5dede6cb19534e3bf0c471614935","modified":1446043009250},{"_id":"themes/umaru/source/css/mixins.styl","shasum":"59d63bc9df9db811b78636e82b476fbb6264a7ef","modified":1446043009251},{"_id":"themes/umaru/source/css/normalize.styl","shasum":"b8fd54e3ca1ed801bc6b0349cd6352558a5aa390","modified":1446043009252},{"_id":"themes/umaru/source/css/post.styl","shasum":"b0663be38627a0fe8510df17570c0fbfd96ee465","modified":1446046464204},{"_id":"themes/umaru/source/css/reset.styl","shasum":"e50a8ad43f498fdcef0912fe06047816b0ccb38a","modified":1446043009253},{"_id":"themes/umaru/source/css/zoom.styl","shasum":"3c8ce0db088b5efc9adc3d82749460242eb68009","modified":1446045846114},{"_id":"themes/umaru/source/images/rss.png","shasum":"efd973f494dcca097969d90bb131ff5bd9913bc4","modified":1446043009254},{"_id":"themes/umaru/source/js/app.js","shasum":"d63272fc74a9c37cc25ee5d35b9a915252fdb6af","modified":1446046422973},{"_id":"themes/umaru/source/js/page-walker.js","shasum":"a274dc3d24fc48f12c4253e718f9ddea931c45fe","modified":1446043009256},{"_id":"themes/umaru/source/js/pjax.js","shasum":"d37ddbb65e32f0d3a720b8f159ca731a79dbe1dc","modified":1446043009257},{"_id":"themes/umaru/source/js/prism.js","shasum":"9c83be8d0d828b42329c5238b3496abeaf04d082","modified":1446043009258},{"_id":"themes/umaru/source/js/zoom.js","shasum":"2848d097b23df4fa0ddaa63f518150036baf2146","modified":1446045937515}],"Category":[{"name":"anime","_id":"cigayplsm0001lojcxd81mat9"},{"name":"Anime","_id":"cigaypltc0007lojc9cohvjly"},{"name":"skills","_id":"cigayplth000blojcmgochzsu"},{"name":"git","_id":"cigaypltm000glojc8csjmqm7"},{"name":"Diary","_id":"cigayplv7000slojc1gvijxwj"},{"name":"JavaScript","_id":"cigayplvb000vlojcq29551tl"}],"Data":[],"Page":[{"title":"Resume","layout":"page","_content":"## Contact\n\n- GitHub: https://github.com/egoist\n- Email: kinpika@outlook.com\n- Wechat: @im_merengue\n\n## Works\n\nI worked remotely for [Jollygoodthemes](http://jollygoodthemes.com/) & [HackPlan](http://hackplan.com/) in the recent year.\nI mostly do front-end stuffs and I have passion in it.\n\n## Projects\n\nI do both back-end and front-end jobs in my personal projects.\n\n#### [INSEKAI](http://insekai.com)\n\nA twitter-like social-network, made by creative people for creative people.\n\n#### [GitHunt](https://GitHunt.io)\n\nWhere you can explore interesting open-source projects shared from GitHub.\n\n#### [ZenColor](https://github.com/seitazen/zencolor)\n\nA wonderful theme for Typecho the blog engine.\n\n#### [Sharplife](https://github.com/seitazen/sharplife)\n\nA wonderful theme for Farbox the blog platform.\n\n#### [Code](http://code.insekai.com)\n\nGitHub Gist like service, you can share you code there and embed it in your sites.\n\n## Open Source\n\nI like Open Source, you can view my lovely open-source projects on [GitHub](https://github.com/egoist).\n\n## Skills\n\n- JavaScript / CoffeeScript / LiveScript / ES6\n- jQuery / React / Vue.js\n- CSS / Sass / Stylus\n- Jade / Swig / Nunjucks\n- MongoDB / MySQL (basic)\n- Gulp / Webpack\n","source":"resume/index.md","raw":"title: Resume\nlayout: page\n---\n## Contact\n\n- GitHub: https://github.com/egoist\n- Email: kinpika@outlook.com\n- Wechat: @im_merengue\n\n## Works\n\nI worked remotely for [Jollygoodthemes](http://jollygoodthemes.com/) & [HackPlan](http://hackplan.com/) in the recent year.\nI mostly do front-end stuffs and I have passion in it.\n\n## Projects\n\nI do both back-end and front-end jobs in my personal projects.\n\n#### [INSEKAI](http://insekai.com)\n\nA twitter-like social-network, made by creative people for creative people.\n\n#### [GitHunt](https://GitHunt.io)\n\nWhere you can explore interesting open-source projects shared from GitHub.\n\n#### [ZenColor](https://github.com/seitazen/zencolor)\n\nA wonderful theme for Typecho the blog engine.\n\n#### [Sharplife](https://github.com/seitazen/sharplife)\n\nA wonderful theme for Farbox the blog platform.\n\n#### [Code](http://code.insekai.com)\n\nGitHub Gist like service, you can share you code there and embed it in your sites.\n\n## Open Source\n\nI like Open Source, you can view my lovely open-source projects on [GitHub](https://github.com/egoist).\n\n## Skills\n\n- JavaScript / CoffeeScript / LiveScript / ES6\n- jQuery / React / Vue.js\n- CSS / Sass / Stylus\n- Jade / Swig / Nunjucks\n- MongoDB / MySQL (basic)\n- Gulp / Webpack\n","date":"2015-10-28T14:36:49.182Z","updated":"2015-10-28T14:36:49.182Z","path":"resume/index.html","comments":1,"_id":"cigayplt10005lojcn78zzzsl"}],"Post":[{"title":"二〇一五年十月新番推荐","date":"2015-10-13T03:29:50.000Z","_content":"\n又到了 EGOIST 带你看新番环节了，今年的十月新番还是有几部符合我的口味，我将从周一到周日推荐一些我在追的番。\n\n## 周一\n\n只推荐一部，「一拳超人」。我没看过漫画，不过一拳男挺逗比的，看够了卖肉卖萌也看看一拳男装逼吧。\n\n## 周二\n\n无聊的日子，没有推荐。\n\n## 周三\n\n毫无疑问有「关于我被绑架到贵族女校当庶民样本的事」，别理我，看图。\n\n![anime](https://ooo.0o0.ooo/2015/10/12/561c7d0bceeb6.png)\n\n## 周四 \n\n仍然无聊。\n\n## 周五\n\n漫画之神手冢治虫的作品「青年黑杰克」，医学番我看得少，这部的配乐和剧情都很有那个时代的感觉。\n\n## 周六\n\n「新妹魔王的契约者 BURST」我看了第一期，看得我都石更了，所以继续追。\n\n「重装武器」当然是萌女主，略三无的萝莉。\n\n「落第骑士英雄谭」我是妹控，喜欢妹纸主动献身。\n\n## 周日\n\n「传颂之物 虚伪的假面」的前作我并没有看，稍微看了看画风感觉不适合我。不过我喜欢这期的猫耳娘。\n\n「终结的炽天使 第2期」，人物很有趣，尽管作画和剧情被吐槽得严重，不过人设还是很经典的，好吧其实我只是喜欢克鲁鲁女王 233。\n\n「进击！巨人中学」真是萌哭我了，而且还有我的初代女神米卡莎。\n\n---\n\n特别附送「女武神驱动」，没有圣光的肉番你值得拥有。","source":"_posts/2015-10-anime-recommendations.md","raw":"title: 二〇一五年十月新番推荐\ndate: 2015-10-13 11:29:50\ntags:\n- anime\ncategories:\n- anime\n\n---\n\n又到了 EGOIST 带你看新番环节了，今年的十月新番还是有几部符合我的口味，我将从周一到周日推荐一些我在追的番。\n\n## 周一\n\n只推荐一部，「一拳超人」。我没看过漫画，不过一拳男挺逗比的，看够了卖肉卖萌也看看一拳男装逼吧。\n\n## 周二\n\n无聊的日子，没有推荐。\n\n## 周三\n\n毫无疑问有「关于我被绑架到贵族女校当庶民样本的事」，别理我，看图。\n\n![anime](https://ooo.0o0.ooo/2015/10/12/561c7d0bceeb6.png)\n\n## 周四 \n\n仍然无聊。\n\n## 周五\n\n漫画之神手冢治虫的作品「青年黑杰克」，医学番我看得少，这部的配乐和剧情都很有那个时代的感觉。\n\n## 周六\n\n「新妹魔王的契约者 BURST」我看了第一期，看得我都石更了，所以继续追。\n\n「重装武器」当然是萌女主，略三无的萝莉。\n\n「落第骑士英雄谭」我是妹控，喜欢妹纸主动献身。\n\n## 周日\n\n「传颂之物 虚伪的假面」的前作我并没有看，稍微看了看画风感觉不适合我。不过我喜欢这期的猫耳娘。\n\n「终结的炽天使 第2期」，人物很有趣，尽管作画和剧情被吐槽得严重，不过人设还是很经典的，好吧其实我只是喜欢克鲁鲁女王 233。\n\n「进击！巨人中学」真是萌哭我了，而且还有我的初代女神米卡莎。\n\n---\n\n特别附送「女武神驱动」，没有圣光的肉番你值得拥有。","slug":"2015-10-anime-recommendations","published":1,"updated":"2015-10-28T14:36:49.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigayplse0000lojcv4biwr1h"},{"title":"为什么动漫如此吸引我？","date":"2015-07-10T01:08:51.000Z","_content":"我想我第一部认真看的动漫应该是神奇宝贝，此外还有龙珠Z。但在那个时候，我其实不知道动漫到底是什么。我只是觉得这是日本卡通片而已，我并不知道大洋彼岸的岛国对动漫如此推崇，那里的动漫真是数以千计，各种脑残粉打扮得像动漫里的角色，当然那时我也并没体会到 hentai 的真正含义。\n\n大概是从看浪客剑心开始我慢慢明白了动漫究竟是什么，我也开始学画漫画，我和我的小伙伴画了一部属于我们的漫画。这件事是真的很有趣，那个时候我大概 14 岁，我记得我是从网上找动漫资料学习画画，然后就被如此之多的动漫惊艳到了。\n\n现在已经过了好几年了，我已经 24 岁，我那参军的兄弟依然亘古不变地从遥远的军营向我推荐动漫来看。我其实已经好几个月没碰动漫了，但现在我满血复活。不管我多少次停止看动漫这件事，我最终还是又开始看了，**为什么？我他妈到底怎么了？老大不小了看个屁的动漫啊？是不是该打住别去看那些半裸萌娘巨乳萝莉撕高达的东西了？动漫到底哪吸引你了？**\n\n其实吧，我觉得原因也很简单。\n\n**第一，动漫的色彩效果真是很炫酷** 在动漫里有各种色彩搭配，亮色、鲜艳色、吸引眼球的颜色，甚至你可能并不知道鲜艳的颜色对保持健康略有裨益！就是说，丰富的颜色能让你心情变好。所以，看动漫从科学角度来说是对身体有好处的（这真的是我说的吗 233\n\n**另一个原因就是，我觉得，啊，对，萌妹子** 动漫里的女生都超可爱的是吧，娇小的外形、大大的眼睛、黑长直，卡哇伊卡哇伊卡哇伊 >3< 搞怪的妹子、萌系妹子、剑姬、肉魅以及我的我的最爱，“猫娘”。她们不只可爱还超性感，这是每个boy无法抵挡的。\n\n**但是！真正让我放不下动漫的原因是，里面的故事** 我看过的动漫各式各样的题材都有，情节各异。里面有些情节阐述的观念和想法是你闻所未闻、耳目一新的，比如说死亡笔记，一个男孩发现了一本日记然后发现自己能靠在日记上写上一个人的名字来杀死他。再比如CODE GEASS，讲的是几个拥有超自然能力的人进行的机甲战争，这些能力比如说读心术和强制控制他人行为。再比如黑之契约者，讲的是某个角色能靠割手腕然后把流出来的血洒在别人身上来杀人。\n\n\n这些想法一个接着一个翻新，你永远想不到的想法就会出现在一部动漫中。我不知道是怎么回事，也许是美国人不善创新？所有故事都大同小异，乏味的故事靠着新的演员来骗钱，但是在日本，我去！你看了一集你就被吸引了，有些东西有人永远不会明白，除非他看了动漫。\n\n最后作为一个作家，很感谢动漫带给我的灵感 :D\n\n---\n\n总感觉我翻译得怪怪的，还是去看原文吧:\n\nJust a Transilation from [WHY ANIME IS SO ADDICTING](https://medium.com/@dwarsement/why-anime-is-so-addicting-fcf6ef36b7c)\n","source":"_posts/why-so-addicted-into-anime.md","raw":"title: 为什么动漫如此吸引我？\ndate: 2015-07-10 09:08:51\ncategories:\n  - Anime\ntags:\n  - anime\n---\n我想我第一部认真看的动漫应该是神奇宝贝，此外还有龙珠Z。但在那个时候，我其实不知道动漫到底是什么。我只是觉得这是日本卡通片而已，我并不知道大洋彼岸的岛国对动漫如此推崇，那里的动漫真是数以千计，各种脑残粉打扮得像动漫里的角色，当然那时我也并没体会到 hentai 的真正含义。\n\n大概是从看浪客剑心开始我慢慢明白了动漫究竟是什么，我也开始学画漫画，我和我的小伙伴画了一部属于我们的漫画。这件事是真的很有趣，那个时候我大概 14 岁，我记得我是从网上找动漫资料学习画画，然后就被如此之多的动漫惊艳到了。\n\n现在已经过了好几年了，我已经 24 岁，我那参军的兄弟依然亘古不变地从遥远的军营向我推荐动漫来看。我其实已经好几个月没碰动漫了，但现在我满血复活。不管我多少次停止看动漫这件事，我最终还是又开始看了，**为什么？我他妈到底怎么了？老大不小了看个屁的动漫啊？是不是该打住别去看那些半裸萌娘巨乳萝莉撕高达的东西了？动漫到底哪吸引你了？**\n\n其实吧，我觉得原因也很简单。\n\n**第一，动漫的色彩效果真是很炫酷** 在动漫里有各种色彩搭配，亮色、鲜艳色、吸引眼球的颜色，甚至你可能并不知道鲜艳的颜色对保持健康略有裨益！就是说，丰富的颜色能让你心情变好。所以，看动漫从科学角度来说是对身体有好处的（这真的是我说的吗 233\n\n**另一个原因就是，我觉得，啊，对，萌妹子** 动漫里的女生都超可爱的是吧，娇小的外形、大大的眼睛、黑长直，卡哇伊卡哇伊卡哇伊 >3< 搞怪的妹子、萌系妹子、剑姬、肉魅以及我的我的最爱，“猫娘”。她们不只可爱还超性感，这是每个boy无法抵挡的。\n\n**但是！真正让我放不下动漫的原因是，里面的故事** 我看过的动漫各式各样的题材都有，情节各异。里面有些情节阐述的观念和想法是你闻所未闻、耳目一新的，比如说死亡笔记，一个男孩发现了一本日记然后发现自己能靠在日记上写上一个人的名字来杀死他。再比如CODE GEASS，讲的是几个拥有超自然能力的人进行的机甲战争，这些能力比如说读心术和强制控制他人行为。再比如黑之契约者，讲的是某个角色能靠割手腕然后把流出来的血洒在别人身上来杀人。\n\n\n这些想法一个接着一个翻新，你永远想不到的想法就会出现在一部动漫中。我不知道是怎么回事，也许是美国人不善创新？所有故事都大同小异，乏味的故事靠着新的演员来骗钱，但是在日本，我去！你看了一集你就被吸引了，有些东西有人永远不会明白，除非他看了动漫。\n\n最后作为一个作家，很感谢动漫带给我的灵感 :D\n\n---\n\n总感觉我翻译得怪怪的，还是去看原文吧:\n\nJust a Transilation from [WHY ANIME IS SO ADDICTING](https://medium.com/@dwarsement/why-anime-is-so-addicting-fcf6ef36b7c)\n","slug":"why-so-addicted-into-anime","published":1,"updated":"2015-10-28T14:36:49.181Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigaypltb0006lojc5fpu3iqt"},{"title":"在终端里使用第三方登录","date":"2015-10-26T09:44:52.000Z","_content":"\n显然你经常在网页和 APP 里使用第三方登录功能，比如用微博登录、用 QQ 登录、用 GitHub 登录，具体的方式是打开相关网页进行授权或者移动端可以利用应用内授权机制授权，那么在终端里如何操作第三方账号登录呢？\n\n很显然，也只能通过打开授权网页的方式获取需要的 access token 来进行操作。\n\n## 新建一个应用\n\n常规步骤，稍后会用在这里获得的 `Client ID` 和 `Client Secret` 进行授权验证。\n\n\n## 思路\n\n这些操作需要你将 API 搭建在自己的服务器上并且拥有数据库读写功能。\n\n你需要用户触发登录操作之后以 GET 的方式打开一个授权网页，比如 `/api/login`，请求时在 URL Query String 中传输一个随机生成的用户 Unique ID，形如 `/api/login?uid=$UID`，推荐使用 [open](https://www.npmjs.org/package/open) 这个库打开网址。\n\n授权成功之后获得的 access token 和 UID 保存到数据库，在之前打开授权页面的同时 POST 请求 `/api/token`，在 body 中传输 UID 信息，设置一个较高的 timeout 让网页不会返回超时。\n\n在授权过程中由于并未获取到 token 所以让 `/api/token` 返回一个 50X 错误，判断获取到 50X 错误后用 setInterval 持续请求这个地址直到返回 200 代码，这个时候 access token 已经被你写入数据库并在这个页面上以 json 的格式输出了，于是这样你得到了需要的 access token，命令行现在可以打印出登录成功的提示信息了。\n","source":"_posts/log-in-with-your-teminal.md","raw":"title: 在终端里使用第三方登录\ndate: 2015-10-26 17:44:52\ntags:\n- terminal\ncategories:\n- skills\n\n---\n\n显然你经常在网页和 APP 里使用第三方登录功能，比如用微博登录、用 QQ 登录、用 GitHub 登录，具体的方式是打开相关网页进行授权或者移动端可以利用应用内授权机制授权，那么在终端里如何操作第三方账号登录呢？\n\n很显然，也只能通过打开授权网页的方式获取需要的 access token 来进行操作。\n\n## 新建一个应用\n\n常规步骤，稍后会用在这里获得的 `Client ID` 和 `Client Secret` 进行授权验证。\n\n\n## 思路\n\n这些操作需要你将 API 搭建在自己的服务器上并且拥有数据库读写功能。\n\n你需要用户触发登录操作之后以 GET 的方式打开一个授权网页，比如 `/api/login`，请求时在 URL Query String 中传输一个随机生成的用户 Unique ID，形如 `/api/login?uid=$UID`，推荐使用 [open](https://www.npmjs.org/package/open) 这个库打开网址。\n\n授权成功之后获得的 access token 和 UID 保存到数据库，在之前打开授权页面的同时 POST 请求 `/api/token`，在 body 中传输 UID 信息，设置一个较高的 timeout 让网页不会返回超时。\n\n在授权过程中由于并未获取到 token 所以让 `/api/token` 返回一个 50X 错误，判断获取到 50X 错误后用 setInterval 持续请求这个地址直到返回 200 代码，这个时候 access token 已经被你写入数据库并在这个页面上以 json 的格式输出了，于是这样你得到了需要的 access token，命令行现在可以打印出登录成功的提示信息了。\n","slug":"log-in-with-your-teminal","published":1,"updated":"2015-10-28T14:36:49.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigaypltg000alojcae6mnw8x"},{"title":"如何在 Git 中使用撤消操作","date":"2015-10-04T06:15:59.000Z","_content":"\n版本控制系统的一个好处就是你可以轻易地撤销之前错误的操作。\n\n当你用 `git commit` 提交了一个新的更改后 git 会将当时的文件内容暂时保存下来，之后你就可以用 git 随意回滚到任意一个版本。\n\n这篇文章会介绍一些常见的可能用到撤销 `undo` 操作的情况。\n\n## 撤销一个已发布的更新\n\n**情景**: 你已经用 `git push` 将代码提交到了 GitHub，然后你意识到这其中的一个 commit 有错误，于是你想撤销那个 commit。\n\n**操作**: `git revert <SHA>`\n\n**效果**: git 会新建一个新的 commit 来执行提供的 <SHA> 对应 commit 的相反的更改，任何在该旧 commit 中删除的内容将会在新 commit 中添加进去，反之亦然。\n\n这是 git 里最安全的撤消操作的办法，因为这不会影响你的提交历史。于是现在你可以提交新的 commit 去撤销之前错误的操作了。\n\n## 修改上次 commit 的提交信息\n\n**情景**: 你在上次 commit 提交信息中打错了一个单词，比如你执行了 `git commit -m \"fxied bug #42\"` 然后你意识到应该是 `fixed bug #42`。\n\n**操作**: `git commit --amend` 或 `git commit --amend -m \"Fixes bug #42\"`\n\n**效果**: `git commit --amend` 结合最新的文件修改情况和上一次提交信息更新并替换上一次提交。没有新的文件更改就直接覆盖上次提交。\n\n## 撤销本地修改\n\n**情景**: 你家的喵星人跑到你的键盘上装逼用双爪打字然后不知怎么还点了保存，然后编辑器还崩溃了，你还没有 commit 这只猫做的修改，你想撤销那个文件里被猫修改的内容。\n\n**操作**: `git checkout -- <bad filename>`\n\n**效果**: `git checkout` 会将该文件的内容恢复到上一次 git commit 的状态。你可以提供一个分支名称或者直接提供要回到的 SHA。\n\n请记住，这种方法作出的撤销是彻底的，这些内容不会被 commit 所以之后你并不能再用 git 恢复这些内容。\n\n## 重置本地修改\n\n**情景**: 你在本地 commit 了一些内容（并没有 push），但是你搞错了，你想撤销最近这三个 commit，就像让它们从来不存在那样。\n\n**操作**: `git reset <last good SHA>` 或 `git reset --hard <last good SHA>`\n\n**效果**: `git reset` 会让你的 git 历史会退到你指定的 SHA 的状态。这些 commit 不存在了但是你硬盘上的这些文件还是维持在被修改了的状态，这是最安全的做法。但是有时你也想同时撤销硬盘上的修改，这时加上 `--hard` 就会很有用。\n\n## 撤销本地修改之后重做\n\n**情景**: 你提交了一些 commit，然后执行 `git reset --hard` 来撤消这些 commit 并清除本地硬盘上的修改。但是最后你意识到你想要回这些 commit！\n\n**操作**: `git reflog` 和 `git reset` 或 `git checkout`\n\n**效果**: `git reflog` 是个修复项目提交历史的好方法。你可以找回几乎所有内容 —— 所有你 commit 过的内容 —— 用 reflog 就行。\n\n你可能对 `git log` 很熟悉，这个操作会列出你的 git 提交历史。`git reflog` 很像它，但是列出的是 `HEAD` 修改的时间。\n\n一些说明:\n\n- `HEAD` 修改。在切换分支时 `HEAD` 会被修改，用 commit 保存修改然后用 reset 撤消修改。但是在你 `git checkout -- <bad filename>` 时并不会被修改，就像上面说过的那样，这些修改不会被 commit，所以 `git reflog` 也不能帮你找回这些内容。\n- `git reflog` 不是永远有用的。git 会定期清理那些无法追溯的内容。不要期望能用 `git reflog` 找回一个多月以前的内容。\n- 你的 `git reflog` 仅对你有用。你不能用 `git reflog` 来找回其他人 commit 的修改。\n\n![reflog](https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png)\n\n然后...接下来怎么做才能撤销之前的撤销？这取决你到你要干什么:\n\n- 如果你想回到一个特定的时间，用 `git reset --hard <SHA>`。\n- 如果你想在不修改提交历史的情况下找回那些文件并作为新文件保存，用 `git checkout <SHA> -- <filename>`。\n- 如果你想使其中一个 commit 回到你的项目历史中，用 `git cherry-pick <SHA>`。\n\n## 提交到了另一个分支\n\n**情景**: 你提交了一些 commits，然后意识到你当前是在 master 分支上，而你其实是想提交到一个 `feature` 分支上。\n\n**操作**: `git branch feature`, `git reset --hard origin/master`, 和 `git checkout feature`\n\n**效果**: 你可能常常使用 `git checkout -b <name>` 操作来检出一个新分支，这是一个很方便的创建新分支的操作，但是你并不想同时切换到那个分支上。现在使用 `git branch feature` 既可以创建一个 `feature` 新分支并且不会切换到那个分支，同时该分支会指向你当前分支最新的一个 commit。\n\n下一步，用 `git reset --hard` 去恢复 `master` 分支到 `origin/master` 的状态。\n\n最后，`git checkout` 到你的 `feature` 分支，你能看到所有的更改。\n\n## 覆盖整个分支\n\n**情景**: 你基于 `master` 分支创建了 `feature` 分支，但是 `master` 分支远远落后 `origin/master` 的更改。现在 `master` 分支和 `origin/master` 同步了，你想马上同步到 `feature` 分支，还不是再次远远落后。\n\n**操作**: `git checkout feature` 和 `git rebase master`\n\n**效果**: 你可能知道用 `git reset` 然后重新 commit 来达到类似效果，不过那样会丢失 commit 历史。\n\n---\n\n本文乃原文常用部分译文: [How to undo (almost) anything with Git](https://github.com/blog/2019-how-to-undo-almost-anything-with-git) —— 作者: [jaw6](https://github.com/jaw6)","source":"_posts/how-to-undo-with-git.md","raw":"title: 如何在 Git 中使用撤消操作\ndate: 2015-10-04 14:15:59\ntags:\n- git\n- udo\ncategories:\n- git\n---\n\n版本控制系统的一个好处就是你可以轻易地撤销之前错误的操作。\n\n当你用 `git commit` 提交了一个新的更改后 git 会将当时的文件内容暂时保存下来，之后你就可以用 git 随意回滚到任意一个版本。\n\n这篇文章会介绍一些常见的可能用到撤销 `undo` 操作的情况。\n\n## 撤销一个已发布的更新\n\n**情景**: 你已经用 `git push` 将代码提交到了 GitHub，然后你意识到这其中的一个 commit 有错误，于是你想撤销那个 commit。\n\n**操作**: `git revert <SHA>`\n\n**效果**: git 会新建一个新的 commit 来执行提供的 <SHA> 对应 commit 的相反的更改，任何在该旧 commit 中删除的内容将会在新 commit 中添加进去，反之亦然。\n\n这是 git 里最安全的撤消操作的办法，因为这不会影响你的提交历史。于是现在你可以提交新的 commit 去撤销之前错误的操作了。\n\n## 修改上次 commit 的提交信息\n\n**情景**: 你在上次 commit 提交信息中打错了一个单词，比如你执行了 `git commit -m \"fxied bug #42\"` 然后你意识到应该是 `fixed bug #42`。\n\n**操作**: `git commit --amend` 或 `git commit --amend -m \"Fixes bug #42\"`\n\n**效果**: `git commit --amend` 结合最新的文件修改情况和上一次提交信息更新并替换上一次提交。没有新的文件更改就直接覆盖上次提交。\n\n## 撤销本地修改\n\n**情景**: 你家的喵星人跑到你的键盘上装逼用双爪打字然后不知怎么还点了保存，然后编辑器还崩溃了，你还没有 commit 这只猫做的修改，你想撤销那个文件里被猫修改的内容。\n\n**操作**: `git checkout -- <bad filename>`\n\n**效果**: `git checkout` 会将该文件的内容恢复到上一次 git commit 的状态。你可以提供一个分支名称或者直接提供要回到的 SHA。\n\n请记住，这种方法作出的撤销是彻底的，这些内容不会被 commit 所以之后你并不能再用 git 恢复这些内容。\n\n## 重置本地修改\n\n**情景**: 你在本地 commit 了一些内容（并没有 push），但是你搞错了，你想撤销最近这三个 commit，就像让它们从来不存在那样。\n\n**操作**: `git reset <last good SHA>` 或 `git reset --hard <last good SHA>`\n\n**效果**: `git reset` 会让你的 git 历史会退到你指定的 SHA 的状态。这些 commit 不存在了但是你硬盘上的这些文件还是维持在被修改了的状态，这是最安全的做法。但是有时你也想同时撤销硬盘上的修改，这时加上 `--hard` 就会很有用。\n\n## 撤销本地修改之后重做\n\n**情景**: 你提交了一些 commit，然后执行 `git reset --hard` 来撤消这些 commit 并清除本地硬盘上的修改。但是最后你意识到你想要回这些 commit！\n\n**操作**: `git reflog` 和 `git reset` 或 `git checkout`\n\n**效果**: `git reflog` 是个修复项目提交历史的好方法。你可以找回几乎所有内容 —— 所有你 commit 过的内容 —— 用 reflog 就行。\n\n你可能对 `git log` 很熟悉，这个操作会列出你的 git 提交历史。`git reflog` 很像它，但是列出的是 `HEAD` 修改的时间。\n\n一些说明:\n\n- `HEAD` 修改。在切换分支时 `HEAD` 会被修改，用 commit 保存修改然后用 reset 撤消修改。但是在你 `git checkout -- <bad filename>` 时并不会被修改，就像上面说过的那样，这些修改不会被 commit，所以 `git reflog` 也不能帮你找回这些内容。\n- `git reflog` 不是永远有用的。git 会定期清理那些无法追溯的内容。不要期望能用 `git reflog` 找回一个多月以前的内容。\n- 你的 `git reflog` 仅对你有用。你不能用 `git reflog` 来找回其他人 commit 的修改。\n\n![reflog](https://cloud.githubusercontent.com/assets/2077/6953866/f6b9f054-d891-11e4-8c53-838eff9f40ae.png)\n\n然后...接下来怎么做才能撤销之前的撤销？这取决你到你要干什么:\n\n- 如果你想回到一个特定的时间，用 `git reset --hard <SHA>`。\n- 如果你想在不修改提交历史的情况下找回那些文件并作为新文件保存，用 `git checkout <SHA> -- <filename>`。\n- 如果你想使其中一个 commit 回到你的项目历史中，用 `git cherry-pick <SHA>`。\n\n## 提交到了另一个分支\n\n**情景**: 你提交了一些 commits，然后意识到你当前是在 master 分支上，而你其实是想提交到一个 `feature` 分支上。\n\n**操作**: `git branch feature`, `git reset --hard origin/master`, 和 `git checkout feature`\n\n**效果**: 你可能常常使用 `git checkout -b <name>` 操作来检出一个新分支，这是一个很方便的创建新分支的操作，但是你并不想同时切换到那个分支上。现在使用 `git branch feature` 既可以创建一个 `feature` 新分支并且不会切换到那个分支，同时该分支会指向你当前分支最新的一个 commit。\n\n下一步，用 `git reset --hard` 去恢复 `master` 分支到 `origin/master` 的状态。\n\n最后，`git checkout` 到你的 `feature` 分支，你能看到所有的更改。\n\n## 覆盖整个分支\n\n**情景**: 你基于 `master` 分支创建了 `feature` 分支，但是 `master` 分支远远落后 `origin/master` 的更改。现在 `master` 分支和 `origin/master` 同步了，你想马上同步到 `feature` 分支，还不是再次远远落后。\n\n**操作**: `git checkout feature` 和 `git rebase master`\n\n**效果**: 你可能知道用 `git reset` 然后重新 commit 来达到类似效果，不过那样会丢失 commit 历史。\n\n---\n\n本文乃原文常用部分译文: [How to undo (almost) anything with Git](https://github.com/blog/2019-how-to-undo-almost-anything-with-git) —— 作者: [jaw6](https://github.com/jaw6)","slug":"how-to-undo-with-git","published":1,"updated":"2015-10-28T14:36:49.180Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigaypltk000flojc3pakfev5"},{"title":"动漫与成见","date":"2015-03-25T01:04:00.000Z","_content":"> 你知道动漫吗？也许你知道的动漫在你眼中代表着“幼稚”、“脱离现实”的东西，很可惜，你在以偏概全，或者你在用老一套的成见来看待自己不了解的世界。\n觉得动漫是脱离现实的人也许忘了这和画画，和你听音乐，和你吃饭没什么不同，来源于生活进而表达生活，只是你的眼光太过狭隘。\n撇开拉低智商的中国动漫不看，种类繁杂的日本动漫不管你是什么水平什么阶层什么年龄都能满足。\n而有的人看了一部“喜羊羊与灰太狼”就叫苦不迭，誓死与动漫绝缘了。对此，我什么都不会说，只是摇头。\n\n现在我这个年龄阶段的中国人基本是看动漫长大的，而比我更小的接触动漫还更多。小学四年级在我的学校就掀起了动漫热潮，那时候最火的的是四驱兄弟和火影忍者，我小学有三年都是报了学校航模兴趣班，原因就是老师会教组装四驱车，我从这些课上了解了马达、四驱和电池等等在那个时候对我来说堪称神奇的东西，小学前三年我在书法班度过，后三年在航模班。当然，后三年也是属于火影的，那个时候我们学校大门外就是卖各种火影周边的小商贩，而我们能承受的就是贴纸了，于是每每有休息时间大门那就会围上一群人，从铁栏里传递着各种另我羡慕的东西。而我的各种书的封面也被我贴上了这些琳琅满目的珍品。\n\n动漫无意是我小时候珍贵的回忆之一。\n\n而到了我现在这个年龄，中国大学生看动漫这件事似乎是被认为不成熟和“活在虚拟世界”以及“脱离现实”的。的确，中国的动漫不太适合学龄儿童观看，比如喜洋洋和灰太狼就完全可以加上一个降低中国儿童平均智商的罪名，而很多日本动漫的水平完全凌驾于这些批评者的智商之上，所以这再次印证了那句——“井底之蛙的批评者是活在精神世界最底层的人”。\n\n很多人认为现实就是每天的日常生活。还有很多人认为看电影也算是活在虚拟世界，成天挂在嘴上的就是那句“你以为是电影啊……”，这些人活得太累，把现实看得太现实，我所知道的美国片确实和这些人想得差不多，“活在虚拟世界”，而有些欧洲片片中的女演员的一段床戏脱衣服居然可以脱得那么自然，自上而下脸上泛着红晕这感觉却又如此奔放，完全不会像美国片那样矫揉造作般的演技，这种比生活还生活的东西，你只能在电影中看到。\n\n大多数人都是想和主流社会的想法趋于一致的，他们其实没有明辨是非的能力。比如对待同性恋，二战时期对待同性恋就是“烧死他们！烧死他们！”，在那个时候这句口号如同真理。而现在似乎社会恍然大悟般，虽然明着维护同性恋的权利，但是街上的路人们大多还是在偷着议论。一个社会的价值观都能发生如此大的转变可想这个社会到底有什么是对的什么是错的。电影「后会无期」里有句至理名言——小孩才看对错，成年人只看利弊。意思大概就是如果你不想装傻就给我认了吧，你只能这样。而有些人选择了装傻，他们就是王小波笔下的“沉默的大多数”中的一部分。他们被认为是弱势群体，因为他们不说话，谁知道他们已是另一个境界的人。\n\n扯远了，再说说动漫。对于电影人们要求的是剧情和演技，而对于动漫自然也有剧情，不过演技则换成了画风和声优。画风自不必多说，个人见解不同，不过声优们绝对是公认的神一般的存在。在电影中你也看到过声嘶力竭，泪眼朦胧，不过绝对不会比声优们体现得更淋漓尽致。电影也有声优不过配音往往都是要按着演员的情绪状态来调整的，而动漫中的人物表情无疑比电影中看到的更夸张更解放天性，因此这样的配音也更为接近自然。而更大一部分则是日本声优的功劳，我昨天还分别看过一部动漫的国语版和日语版，国语配音显得极其平淡，而日语则抑扬顿挫感情充沛。\n\n最后还是要告诉那些对动漫有成见的人，你看待一件事物是怎么的取决于你看到的是它的哪个部分，比如有人看 A 片纯粹为了手淫，而有些人则是为了学习经验来改善夫妻性生活质量，这个世界上除了科学没有对或错，有的只是固守的执念和狭隘的心胸。\n","source":"_posts/good-and-bad-anime.md","raw":"title: 动漫与成见\ndate: 2015-03-25 09:04:00\ncategories:\n  - Anime\n---\n> 你知道动漫吗？也许你知道的动漫在你眼中代表着“幼稚”、“脱离现实”的东西，很可惜，你在以偏概全，或者你在用老一套的成见来看待自己不了解的世界。\n觉得动漫是脱离现实的人也许忘了这和画画，和你听音乐，和你吃饭没什么不同，来源于生活进而表达生活，只是你的眼光太过狭隘。\n撇开拉低智商的中国动漫不看，种类繁杂的日本动漫不管你是什么水平什么阶层什么年龄都能满足。\n而有的人看了一部“喜羊羊与灰太狼”就叫苦不迭，誓死与动漫绝缘了。对此，我什么都不会说，只是摇头。\n\n现在我这个年龄阶段的中国人基本是看动漫长大的，而比我更小的接触动漫还更多。小学四年级在我的学校就掀起了动漫热潮，那时候最火的的是四驱兄弟和火影忍者，我小学有三年都是报了学校航模兴趣班，原因就是老师会教组装四驱车，我从这些课上了解了马达、四驱和电池等等在那个时候对我来说堪称神奇的东西，小学前三年我在书法班度过，后三年在航模班。当然，后三年也是属于火影的，那个时候我们学校大门外就是卖各种火影周边的小商贩，而我们能承受的就是贴纸了，于是每每有休息时间大门那就会围上一群人，从铁栏里传递着各种另我羡慕的东西。而我的各种书的封面也被我贴上了这些琳琅满目的珍品。\n\n动漫无意是我小时候珍贵的回忆之一。\n\n而到了我现在这个年龄，中国大学生看动漫这件事似乎是被认为不成熟和“活在虚拟世界”以及“脱离现实”的。的确，中国的动漫不太适合学龄儿童观看，比如喜洋洋和灰太狼就完全可以加上一个降低中国儿童平均智商的罪名，而很多日本动漫的水平完全凌驾于这些批评者的智商之上，所以这再次印证了那句——“井底之蛙的批评者是活在精神世界最底层的人”。\n\n很多人认为现实就是每天的日常生活。还有很多人认为看电影也算是活在虚拟世界，成天挂在嘴上的就是那句“你以为是电影啊……”，这些人活得太累，把现实看得太现实，我所知道的美国片确实和这些人想得差不多，“活在虚拟世界”，而有些欧洲片片中的女演员的一段床戏脱衣服居然可以脱得那么自然，自上而下脸上泛着红晕这感觉却又如此奔放，完全不会像美国片那样矫揉造作般的演技，这种比生活还生活的东西，你只能在电影中看到。\n\n大多数人都是想和主流社会的想法趋于一致的，他们其实没有明辨是非的能力。比如对待同性恋，二战时期对待同性恋就是“烧死他们！烧死他们！”，在那个时候这句口号如同真理。而现在似乎社会恍然大悟般，虽然明着维护同性恋的权利，但是街上的路人们大多还是在偷着议论。一个社会的价值观都能发生如此大的转变可想这个社会到底有什么是对的什么是错的。电影「后会无期」里有句至理名言——小孩才看对错，成年人只看利弊。意思大概就是如果你不想装傻就给我认了吧，你只能这样。而有些人选择了装傻，他们就是王小波笔下的“沉默的大多数”中的一部分。他们被认为是弱势群体，因为他们不说话，谁知道他们已是另一个境界的人。\n\n扯远了，再说说动漫。对于电影人们要求的是剧情和演技，而对于动漫自然也有剧情，不过演技则换成了画风和声优。画风自不必多说，个人见解不同，不过声优们绝对是公认的神一般的存在。在电影中你也看到过声嘶力竭，泪眼朦胧，不过绝对不会比声优们体现得更淋漓尽致。电影也有声优不过配音往往都是要按着演员的情绪状态来调整的，而动漫中的人物表情无疑比电影中看到的更夸张更解放天性，因此这样的配音也更为接近自然。而更大一部分则是日本声优的功劳，我昨天还分别看过一部动漫的国语版和日语版，国语配音显得极其平淡，而日语则抑扬顿挫感情充沛。\n\n最后还是要告诉那些对动漫有成见的人，你看待一件事物是怎么的取决于你看到的是它的哪个部分，比如有人看 A 片纯粹为了手淫，而有些人则是为了学习经验来改善夫妻性生活质量，这个世界上除了科学没有对或错，有的只是固守的执念和狭隘的心胸。\n","slug":"good-and-bad-anime","published":1,"updated":"2015-10-28T14:36:49.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigaypluy000mlojcz5b97a8a"},{"title":"Git 备忘录","date":"2015-10-07T13:18:54.000Z","_content":"\nGit 的一些常用操作备忘。\n\n## 起步\n\n安装好 Git 之后，配置你的资料:\n\n```bash\n# 配置用户名\ngit config --global user.name \"Your Real Name\"\n# 配置邮箱地址\ngit config --global user.email you@email.address\n```\n\n之后生成 SSH 密钥:\n\n```bash\nssh-keygen -C 'your@email.address' -t rsa\n```\n\n**初始化一个项目**\n\n```bash\n# 初始化 git 项目\ngit init\n# 添加一个叫 origin 的源\n# 使用 ssh 地址\ngit remote add origin git@github.com:username/reponame.git\n# 使用 username/password 登录 https 地址\ngit remote add origin https://username@password:github.com/username/reponame.git\n```\n\n**推送到服务器**\n\n```bash\n# 记录所有新增和删除的文件\ngit add -A\n# 更新理由\ngit commit -m \"message\"\n# 推送到服务器端\ngit push origin master\n```\n\n**更新到本地**\n\n```bash\n# 源 + 分支名\ngit pull origin master\n```\n\n**克隆项目**\n\n下载代码时有用:\n\n```bash\n# 克隆到以这个项目名命名的文件夹\ngit clone https://github.com/username/reponame.git\n# 克隆到你自定义的文件夹\ngit clone https://github.com/username/reponame.git name\n```\n\n*Keep Updating...*\n","source":"_posts/git-memo.md","raw":"title: Git 备忘录\ndate: 2015-10-07 21:18:54\ntags:\n- git\ncategories:\n- git\n---\n\nGit 的一些常用操作备忘。\n\n## 起步\n\n安装好 Git 之后，配置你的资料:\n\n```bash\n# 配置用户名\ngit config --global user.name \"Your Real Name\"\n# 配置邮箱地址\ngit config --global user.email you@email.address\n```\n\n之后生成 SSH 密钥:\n\n```bash\nssh-keygen -C 'your@email.address' -t rsa\n```\n\n**初始化一个项目**\n\n```bash\n# 初始化 git 项目\ngit init\n# 添加一个叫 origin 的源\n# 使用 ssh 地址\ngit remote add origin git@github.com:username/reponame.git\n# 使用 username/password 登录 https 地址\ngit remote add origin https://username@password:github.com/username/reponame.git\n```\n\n**推送到服务器**\n\n```bash\n# 记录所有新增和删除的文件\ngit add -A\n# 更新理由\ngit commit -m \"message\"\n# 推送到服务器端\ngit push origin master\n```\n\n**更新到本地**\n\n```bash\n# 源 + 分支名\ngit pull origin master\n```\n\n**克隆项目**\n\n下载代码时有用:\n\n```bash\n# 克隆到以这个项目名命名的文件夹\ngit clone https://github.com/username/reponame.git\n# 克隆到你自定义的文件夹\ngit clone https://github.com/username/reponame.git name\n```\n\n*Keep Updating...*\n","slug":"git-memo","published":1,"updated":"2015-10-28T14:36:49.178Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigayplv1000olojcwew5rq85"},{"title":"一切漫长的","date":"2015-06-12T08:24:51.000Z","_content":"一切漫长的，终将分开来，脱离母体，彼此隔离，而过程，却是缓慢而重复。\n\n我第一次感到漫长，是在一个斜坡上，自上而下的滑行让我和时间同步，那是我和童年伙伴们的漫长时光，在一起旱冰的乐趣，似乎就像那些年夏天的骄阳一般，不可磨灭，似乎会一直，一直进行下去。\n\n第二次的漫长，说来也就不怎么光彩，那是课桌下的漫长。在旱冰之后的一段日子里，我的胆子没得到什么锻炼，躲在课桌下不去参加体检虽然不是件漫长的事情，但是憋尿是每个人都万万不能擅长的事情。最终我没忍住，被老师和在高年级的我姐姐带回了家接受训斥，憋尿门也成了日后我被我姐取笑的笑点之一。\n\n第三次漫长，是我稍大一些时候的了，小学五年级。几位电视台的姐姐来学校找为她们报道运动会的小记者，于是有一场每个人都可以去参加的面试会。而我也去了。\n\n也许我小时候是个自以为很有心机的小朋友，我在观察我前面每个同学的面试情况，而我现在知道，我只是单纯地以为只有我会这样做。\n\n我前面的那个同学，也是我小学最好的朋友，他的面试让我学到了我自以为最受用的一句话，“小朋友，以后说话的时候要看着别人的眼睛哦~”。于是我，似乎在强调自己有一对“大大咧咧”的眼睛一样，轮到我了，我就这样看着电视台的姐姐。姐姐似乎知道些什么，尽管我没通过，还是给了我一次机会，让我写一篇运动会报道给她看看。我第一次感受到真诚给我带来的回报。而至于所谓的漫长，不过是我看见姐姐的眼里有我的时候，时间静止的温柔罢了。\n\n漫长的还有很多，人生的这三段也许不是最值得回味的，却是首先回想起来的。\n","source":"_posts/all-things-last-long.md","raw":"title: 一切漫长的\ndate: 2015-06-12 16:24:51\ncategories:\n  - Diary\n---\n一切漫长的，终将分开来，脱离母体，彼此隔离，而过程，却是缓慢而重复。\n\n我第一次感到漫长，是在一个斜坡上，自上而下的滑行让我和时间同步，那是我和童年伙伴们的漫长时光，在一起旱冰的乐趣，似乎就像那些年夏天的骄阳一般，不可磨灭，似乎会一直，一直进行下去。\n\n第二次的漫长，说来也就不怎么光彩，那是课桌下的漫长。在旱冰之后的一段日子里，我的胆子没得到什么锻炼，躲在课桌下不去参加体检虽然不是件漫长的事情，但是憋尿是每个人都万万不能擅长的事情。最终我没忍住，被老师和在高年级的我姐姐带回了家接受训斥，憋尿门也成了日后我被我姐取笑的笑点之一。\n\n第三次漫长，是我稍大一些时候的了，小学五年级。几位电视台的姐姐来学校找为她们报道运动会的小记者，于是有一场每个人都可以去参加的面试会。而我也去了。\n\n也许我小时候是个自以为很有心机的小朋友，我在观察我前面每个同学的面试情况，而我现在知道，我只是单纯地以为只有我会这样做。\n\n我前面的那个同学，也是我小学最好的朋友，他的面试让我学到了我自以为最受用的一句话，“小朋友，以后说话的时候要看着别人的眼睛哦~”。于是我，似乎在强调自己有一对“大大咧咧”的眼睛一样，轮到我了，我就这样看着电视台的姐姐。姐姐似乎知道些什么，尽管我没通过，还是给了我一次机会，让我写一篇运动会报道给她看看。我第一次感受到真诚给我带来的回报。而至于所谓的漫长，不过是我看见姐姐的眼里有我的时候，时间静止的温柔罢了。\n\n漫长的还有很多，人生的这三段也许不是最值得回味的，却是首先回想起来的。\n","slug":"all-things-last-long","published":1,"updated":"2015-10-28T14:36:49.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigayplv5000rlojcztxsm3ug"},{"title":"一个简单的 localStorage 扩展实现","date":"2015-09-30T04:56:03.000Z","_content":"之前做了一个类似 `localStorage` 的 `orm` 之类的东西，可以让你简单地像操作数据库一样地操作 `localStorage`。因为打算做个记事本之类的应用需要在本地储存笔记并方便的进行查询所以建立了这个库。\n\n你可以简单地预览一下：\n\n```javascript\n// localdb 会自动为新插入的 collcetion 生成 `_id`、`index` 和 `createdAt` \n// 以及 `updatedAt`\n// `_id` 是类似 MongoDB 的 objectId\nvar User = new localdb('User', 'Array', true)\n\nvar users = [{\n  username: 'kevin',\n  age: 16\n}, {\n  username: 'joe',\n  age: 19\n}, {\n  username: 'zchan',\n  age: 12\n}]\n\nvar opts = {\n  sort: 1,\n  sortBy: 'age'\n}\nvar users_fetched = User.override(users, true).find(null, opts)\n\nconsole.log(JSON.stringify(users_fetched, null, 2))\n```\n\n这样就能按照 `age` 递增输出这样的结果:\n\n```json\n[\n  {\n    \"username\": \"zchan\",\n    \"age\": 12,\n    \"index\": 2,\n    \"_id\": \"560b780cfac748a940e57438\",\n    \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n    \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n  },\n  {\n    \"username\": \"kevin\",\n    \"age\": 16,\n    \"index\": 0,\n    \"_id\": \"560b780ca4833a2e978efcb2\",\n    \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n    \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n  },\n  {\n    \"username\": \"joe\",\n    \"age\": 19,\n    \"index\": 1,\n    \"_id\": \"560b780c1d6c1f81ca7bf2e9\",\n    \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n    \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n  }\n]\n```\n\n如果你想查询 `username` 为 `zchan` 的用户:\n\n```javascript\nvar query = {\n  username: 'zchan'\n}\n\nvar zchan = User.findOne(query)\n\nconsole.log(JSON.stringify(zchan, null, 2))\n```\n\n这样就查询并返回了一个对象:\n\n```json\n{\n  \"username\": \"zchan\",\n  \"age\": 12,\n  \"index\": 2,\n  \"_id\": \"560b780cfac748a940e57438\",\n  \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n  \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n}\n```\n\n`.find` 和 `.findOne` 类似不过不限制数量且可以进行排序、分页查询等操作。\n\n甚至支持了 MongoDB 的 `populate` 特性，不过暂时只能查询一层嵌套:\n\n```javascript\n// populate another class, eg: your Post have a Author field\nconst Post = new localdb('Post', 'Array')\nconst User = new localdb('User', 'Array')\n\n// you should have the Author's objectId to create an instance of that class\nconst author = User.extend('some_object_id')\n\nPost.add({\n  title: 'mt post title',\n  author: author\n})\n\n// then you can populate that field before .find or .findOne\nPost.populate('author').findOne()\n```\n\n---\n\n更详细的使用可以参考这个用 Vue 和 LocalDB [TodoMVC](http://output.jsbin.com/titeve) 演示和 [API](https://egoist.github.io/localdb/)。\n\n","source":"_posts/a-light-weight-localstorage-orm.md","raw":"title: 一个简单的 localStorage 扩展实现\ndate: 2015-09-30 12:56:03\ntags: \n- localStorage\ncategories:\n- JavaScript\n---\n之前做了一个类似 `localStorage` 的 `orm` 之类的东西，可以让你简单地像操作数据库一样地操作 `localStorage`。因为打算做个记事本之类的应用需要在本地储存笔记并方便的进行查询所以建立了这个库。\n\n你可以简单地预览一下：\n\n```javascript\n// localdb 会自动为新插入的 collcetion 生成 `_id`、`index` 和 `createdAt` \n// 以及 `updatedAt`\n// `_id` 是类似 MongoDB 的 objectId\nvar User = new localdb('User', 'Array', true)\n\nvar users = [{\n  username: 'kevin',\n  age: 16\n}, {\n  username: 'joe',\n  age: 19\n}, {\n  username: 'zchan',\n  age: 12\n}]\n\nvar opts = {\n  sort: 1,\n  sortBy: 'age'\n}\nvar users_fetched = User.override(users, true).find(null, opts)\n\nconsole.log(JSON.stringify(users_fetched, null, 2))\n```\n\n这样就能按照 `age` 递增输出这样的结果:\n\n```json\n[\n  {\n    \"username\": \"zchan\",\n    \"age\": 12,\n    \"index\": 2,\n    \"_id\": \"560b780cfac748a940e57438\",\n    \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n    \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n  },\n  {\n    \"username\": \"kevin\",\n    \"age\": 16,\n    \"index\": 0,\n    \"_id\": \"560b780ca4833a2e978efcb2\",\n    \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n    \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n  },\n  {\n    \"username\": \"joe\",\n    \"age\": 19,\n    \"index\": 1,\n    \"_id\": \"560b780c1d6c1f81ca7bf2e9\",\n    \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n    \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n  }\n]\n```\n\n如果你想查询 `username` 为 `zchan` 的用户:\n\n```javascript\nvar query = {\n  username: 'zchan'\n}\n\nvar zchan = User.findOne(query)\n\nconsole.log(JSON.stringify(zchan, null, 2))\n```\n\n这样就查询并返回了一个对象:\n\n```json\n{\n  \"username\": \"zchan\",\n  \"age\": 12,\n  \"index\": 2,\n  \"_id\": \"560b780cfac748a940e57438\",\n  \"createdAt\": \"2015-09-30T05:50:04.156Z\",\n  \"updatedAt\": \"2015-09-30T05:50:04.156Z\"\n}\n```\n\n`.find` 和 `.findOne` 类似不过不限制数量且可以进行排序、分页查询等操作。\n\n甚至支持了 MongoDB 的 `populate` 特性，不过暂时只能查询一层嵌套:\n\n```javascript\n// populate another class, eg: your Post have a Author field\nconst Post = new localdb('Post', 'Array')\nconst User = new localdb('User', 'Array')\n\n// you should have the Author's objectId to create an instance of that class\nconst author = User.extend('some_object_id')\n\nPost.add({\n  title: 'mt post title',\n  author: author\n})\n\n// then you can populate that field before .find or .findOne\nPost.populate('author').findOne()\n```\n\n---\n\n更详细的使用可以参考这个用 Vue 和 LocalDB [TodoMVC](http://output.jsbin.com/titeve) 演示和 [API](https://egoist.github.io/localdb/)。\n\n","slug":"a-light-weight-localstorage-orm","published":1,"updated":"2015-10-28T14:36:49.177Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigayplva000ulojcqe41yg4j"},{"title":"Hello World","date":"2015-09-22T17:09:15.000Z","_content":"As you can see, yet another Hello World post is written by me, I cannot even remember how much time I've spent in writing such silly posts.\n\nAnother bad habit I had is I keep doing \"Hello World\" stuffs, that means I am afriad of those hard challenges. I'm pretending that I was busy by doing easy things, I can never be able to face the real me myself until I can make up my mind to skip those \"do-it-happily\" stuffs. No pains no gain is so easy to read, and so hard to perform.\n","source":"_posts/Hello-World.md","raw":"title: Hello World\ndate: 2015-09-23 01:09:15\ncategories:\n\t- Diary\ntags:\n\t- start\n---\nAs you can see, yet another Hello World post is written by me, I cannot even remember how much time I've spent in writing such silly posts.\n\nAnother bad habit I had is I keep doing \"Hello World\" stuffs, that means I am afriad of those hard challenges. I'm pretending that I was busy by doing easy things, I can never be able to face the real me myself until I can make up my mind to skip those \"do-it-happily\" stuffs. No pains no gain is so easy to read, and so hard to perform.\n","slug":"Hello-World","published":1,"updated":"2015-10-28T14:36:49.176Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigayplve000zlojcr0giyrxi"},{"title":"二〇一五年七月新番回顾","date":"2015-10-01T14:46:01.000Z","_content":"\n国庆第一天就要结束了，也就是说今年七月新番也变旧番了。周末没更新的日子挺难熬，写篇回顾打发时间。\n\n本季刚开始最吸引我的竟然是**「没有黄段子存在的无聊世界」**，在七月之前的新番介绍里我大概直接忽略了这部动漫，我心想是无聊搞笑番就无视了，哪只虽然的确很搞笑，不过非常能够刷新我节操的下限，为我打开了新世界的大门，于是它成为我每周必追。不管是教主的笑声，还是安娜前辈的妹汁都让我对每一集充满期待。\n\n\n再来说**「出包女王」**和**「我老婆是学生会长」**，无疑这也是我每周必追，原因显而易见，无修版是上天赐予我的礼物。\n\n上一季没播完的**「食戟之灵」**我是属于萌女主的类型，这类黑长傲娇属性冷的类型对我的伤害太大，欲罢不能。\n\n看**「干物妹小埋」**小埋完全是因为看到很多人的好评，本来对这种废萌日常提不起劲的但看过一两集之后我就也买了薯片可乐两三天全部补完了。现在的每周星期四晚上变成了我的小埋夜，从未感到薯片加可乐如此地诱人，确定这部番不是乐事宣传片吗 XD\n\n**「魔法少女伊莉雅」**和**「赤发白雪姬」**前几集挺有意思，后面看着看着追不下去了。\n\n**「监狱学园」**没什么萌点啊，但是花学姐的保健室play 真的让我精尽人亡，这部番没了如此有魅力的花学姐简直不敢想象！为了花学姐的福利漫画动画都追了。\n\n**「龙珠超」**也是我很期待的，毕竟龙珠全系列我都非常喜欢，开头是类似神与神的内容，到后面应该会有更精彩的展开。\n\n对于大魔王的**「夏洛特」**自然也是吐槽之声遍地，总而言之就是太多的龙套和神跳跃的剧情让我攒了很多想寄刀片的欲望。结局也是无力吐槽，虽然对于男主算是 Happy End 可是也算太勉强的结局了。前期日常后期屌丝逆转拯救世界的片子可以数得出来都是烂片，我并不是在说**「罪恶王冠」**，因为它并没有太多龙套剧情、消失的人物和奇怪的剧情发展，再说配乐上罪恶王冠就够你重播一百遍了。于是夏洛特无疑成为又一部观众愿意看的烂片。\n\n最后终于到该说本季女神了！教主虽好可我其实喜欢三无类型的女主，于是**「六花的勇者」**里的芙蕾米毫无疑问继上季**「在地下城寻求邂逅是否搞错了什么」**中的剑姬成为我的新任女神。魅力源自抹胸上衣一点没错。\n\n---\n\n以上就是七月新番回顾，对于十月新番目前没什么感兴趣的，除了**「一拳超人」**和**「终结的炽天使」**后半部外。遥想去年十月新番**「寄生兽」**和**「东京食尸鬼」**真是把我的十月炸开了锅，今年还会有如此良辰的十月吗？\n\n不会有吧，大概。\n\n---\n\n最后是一个本季我的追番列表：\n\n- 学园孤岛 ★★★\n- 食戟之灵 ★★★★\n- 监狱学园 ★★★★\n- 魔法少女伊莉雅 ★★☆\n- 夏洛特 ★★★★\n- 黄段子不存在的无聊世界 ★★★★☆\n- 六花的勇者 ★★★★\n- 龙珠超 ★★★☆\n- 出包女王 ★★★★\n- 赤发白雪姬 ★★★\n- 我老婆是学生会长 ★★★★\n- 干物妹小埋 ★★★★\n- 黑街 ★★★","source":"_posts/2015-7-animes-review.md","raw":"title: 二〇一五年七月新番回顾\ndate: 2015-10-01 22:46:01\ntags:\n- anime\ncategories:\n- anime\n---\n\n国庆第一天就要结束了，也就是说今年七月新番也变旧番了。周末没更新的日子挺难熬，写篇回顾打发时间。\n\n本季刚开始最吸引我的竟然是**「没有黄段子存在的无聊世界」**，在七月之前的新番介绍里我大概直接忽略了这部动漫，我心想是无聊搞笑番就无视了，哪只虽然的确很搞笑，不过非常能够刷新我节操的下限，为我打开了新世界的大门，于是它成为我每周必追。不管是教主的笑声，还是安娜前辈的妹汁都让我对每一集充满期待。\n\n\n再来说**「出包女王」**和**「我老婆是学生会长」**，无疑这也是我每周必追，原因显而易见，无修版是上天赐予我的礼物。\n\n上一季没播完的**「食戟之灵」**我是属于萌女主的类型，这类黑长傲娇属性冷的类型对我的伤害太大，欲罢不能。\n\n看**「干物妹小埋」**小埋完全是因为看到很多人的好评，本来对这种废萌日常提不起劲的但看过一两集之后我就也买了薯片可乐两三天全部补完了。现在的每周星期四晚上变成了我的小埋夜，从未感到薯片加可乐如此地诱人，确定这部番不是乐事宣传片吗 XD\n\n**「魔法少女伊莉雅」**和**「赤发白雪姬」**前几集挺有意思，后面看着看着追不下去了。\n\n**「监狱学园」**没什么萌点啊，但是花学姐的保健室play 真的让我精尽人亡，这部番没了如此有魅力的花学姐简直不敢想象！为了花学姐的福利漫画动画都追了。\n\n**「龙珠超」**也是我很期待的，毕竟龙珠全系列我都非常喜欢，开头是类似神与神的内容，到后面应该会有更精彩的展开。\n\n对于大魔王的**「夏洛特」**自然也是吐槽之声遍地，总而言之就是太多的龙套和神跳跃的剧情让我攒了很多想寄刀片的欲望。结局也是无力吐槽，虽然对于男主算是 Happy End 可是也算太勉强的结局了。前期日常后期屌丝逆转拯救世界的片子可以数得出来都是烂片，我并不是在说**「罪恶王冠」**，因为它并没有太多龙套剧情、消失的人物和奇怪的剧情发展，再说配乐上罪恶王冠就够你重播一百遍了。于是夏洛特无疑成为又一部观众愿意看的烂片。\n\n最后终于到该说本季女神了！教主虽好可我其实喜欢三无类型的女主，于是**「六花的勇者」**里的芙蕾米毫无疑问继上季**「在地下城寻求邂逅是否搞错了什么」**中的剑姬成为我的新任女神。魅力源自抹胸上衣一点没错。\n\n---\n\n以上就是七月新番回顾，对于十月新番目前没什么感兴趣的，除了**「一拳超人」**和**「终结的炽天使」**后半部外。遥想去年十月新番**「寄生兽」**和**「东京食尸鬼」**真是把我的十月炸开了锅，今年还会有如此良辰的十月吗？\n\n不会有吧，大概。\n\n---\n\n最后是一个本季我的追番列表：\n\n- 学园孤岛 ★★★\n- 食戟之灵 ★★★★\n- 监狱学园 ★★★★\n- 魔法少女伊莉雅 ★★☆\n- 夏洛特 ★★★★\n- 黄段子不存在的无聊世界 ★★★★☆\n- 六花的勇者 ★★★★\n- 龙珠超 ★★★☆\n- 出包女王 ★★★★\n- 赤发白雪姬 ★★★\n- 我老婆是学生会长 ★★★★\n- 干物妹小埋 ★★★★\n- 黑街 ★★★","slug":"2015-7-animes-review","published":1,"updated":"2015-10-28T14:36:49.175Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cigayplvi0013lojcz00kgb2g"}],"PostAsset":[],"PostCategory":[{"post_id":"cigayplse0000lojcv4biwr1h","category_id":"cigayplsm0001lojcxd81mat9","_id":"cigayplsq0004lojcipl3qeyb"},{"post_id":"cigaypltb0006lojc5fpu3iqt","category_id":"cigaypltc0007lojc9cohvjly","_id":"cigayplte0009lojc54uvpgi7"},{"post_id":"cigaypltg000alojcae6mnw8x","category_id":"cigayplth000blojcmgochzsu","_id":"cigaypltj000elojc0pclj67x"},{"post_id":"cigaypltk000flojc3pakfev5","category_id":"cigaypltm000glojc8csjmqm7","_id":"cigaypltn000jlojc6kse2d29"},{"post_id":"cigaypluy000mlojcz5b97a8a","category_id":"cigaypltc0007lojc9cohvjly","_id":"cigayplv0000nlojcb1070bad"},{"post_id":"cigayplv1000olojcwew5rq85","category_id":"cigaypltm000glojc8csjmqm7","_id":"cigayplv3000plojcjupq6eri"},{"post_id":"cigayplv5000rlojcztxsm3ug","category_id":"cigayplv7000slojc1gvijxwj","_id":"cigayplv8000tlojc9rae1cd6"},{"post_id":"cigayplva000ulojcqe41yg4j","category_id":"cigayplvb000vlojcq29551tl","_id":"cigayplvd000ylojcgvs0i3n0"},{"post_id":"cigayplve000zlojcr0giyrxi","category_id":"cigayplv7000slojc1gvijxwj","_id":"cigayplvf0010lojcz0xh7k7b"},{"post_id":"cigayplvi0013lojcz00kgb2g","category_id":"cigayplsm0001lojcxd81mat9","_id":"cigayplvj0014lojccyn71as9"}],"PostTag":[{"post_id":"cigayplse0000lojcv4biwr1h","tag_id":"cigayplsm0002lojcv26d1w31","_id":"cigayplsp0003lojc6pqx15ie"},{"post_id":"cigaypltb0006lojc5fpu3iqt","tag_id":"cigayplsm0002lojcv26d1w31","_id":"cigaypltd0008lojclt6zpxt6"},{"post_id":"cigaypltg000alojcae6mnw8x","tag_id":"cigayplti000clojc58fbfxf7","_id":"cigayplti000dlojcaw4ke9ir"},{"post_id":"cigaypltk000flojc3pakfev5","tag_id":"cigaypltm000hlojchm4t1iwf","_id":"cigaypltn000klojcbnyedpez"},{"post_id":"cigaypltk000flojc3pakfev5","tag_id":"cigaypltm000ilojcuu2qdd8p","_id":"cigaypltn000llojci9w5nuwf"},{"post_id":"cigayplv1000olojcwew5rq85","tag_id":"cigaypltm000hlojchm4t1iwf","_id":"cigayplv3000qlojcha009ruq"},{"post_id":"cigayplva000ulojcqe41yg4j","tag_id":"cigayplvc000wlojcm5it6us8","_id":"cigayplvc000xlojccaj2blsp"},{"post_id":"cigayplve000zlojcr0giyrxi","tag_id":"cigayplvg0011lojcyp5316oc","_id":"cigayplvg0012lojcyr6ulgrk"},{"post_id":"cigayplvi0013lojcz00kgb2g","tag_id":"cigayplsm0002lojcv26d1w31","_id":"cigayplvk0015lojcqxu48wbm"}],"Tag":[{"name":"anime","_id":"cigayplsm0002lojcv26d1w31"},{"name":"terminal","_id":"cigayplti000clojc58fbfxf7"},{"name":"git","_id":"cigaypltm000hlojchm4t1iwf"},{"name":"udo","_id":"cigaypltm000ilojcuu2qdd8p"},{"name":"localStorage","_id":"cigayplvc000wlojcm5it6us8"},{"name":"start","_id":"cigayplvg0011lojcyp5316oc"}]}}